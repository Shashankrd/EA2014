from __future__ import division

__author__ = 'priyanksanghavi'


import numpy as np
import matplotlib.pyplot as plt
import time


np.random.seed(1234)
count = 300
numberOfNodes = 500
sample_space_size = 50
pop_size = 20
generations = 0
gen = []
k = 0
runs = 20
run = []
source = 122
destination = 429

p = 0
pc = 0.8
pm = 0.01

length = 20
offspring_final_length = 500
sample_fitness = [0 for x in range(sample_space_size)]
fitness = [0 for x in range(pop_size)]
temp_population = [[0 for x in range(length)] for y in range(sample_space_size)]
population = [[0 for x in range(length)] for y in range(pop_size)]
offspring = [[0 for x in range(length)] for y in range(3 * pop_size)]
offspring_fitness = [0 for x in range(3 * pop_size)]
final_fitness = [0 for x in range(3 * pop_size)]
best_fitness = [0 for x in range(count)]
mean_fitness = [0 for x in range(count)]
best = [0 for x in range(length)]
sus = [0 for x in range(pop_size)]
allpathmin = [0 for x in range(count)]
minpathrun = [0 for x in range(runs)]
minpathrunall = [0 for x in range(runs)]


# for all paths
allspace = 5000
all_paths = [[0 for x in range(length)] for y in range(allspace)]
allfitness = [1000 for x in range(allspace)]

fit_best = 1000
weights = np.random.randint(50, 500, size=(numberOfNodes, numberOfNodes))

links = [[0 for x in range(numberOfNodes)] for y in range(numberOfNodes)]
for q in range(numberOfNodes):
    for r in range(numberOfNodes - q):
        if weights[q][r] < 200 and q != r:
            links[q][r] = 1
            links[r][q] = 1


# def popinit():
#     global weights, links
#     weights = np.random.randint(50, 500, size=(numberOfNodes, numberOfNodes))
#
#     links = [[0 for x in range(numberOfNodes)] for y in range(numberOfNodes)]
#     for q in range(numberOfNodes):
#         for r in range(numberOfNodes - q):
#             if weights[q][r] < 200 and q != r:
#                 links[q][r] = 1
#                 links[r][q] = 1


def init_population():
    global population
    global fitness, k

    # generate initial population
    for i in range(0, pop_size):
        k = 0
        while k == 0:
            k = 0
            temp_population[i][0] = source
            for j in range(1, length):
                if k == 0:
                    if links[temp_population[i][j - 1] - 1][destination - 1] == 1:
                        temp_population[i][j] = destination
                        k = 1
                    else:
                        temp_population[i][j] = np.random.randint(1, (numberOfNodes + 1))
                        while temp_population[i][j] == source or links[temp_population[i][j - 1] - 1][temp_population[i][j] - 1] == 0:
                            temp_population[i][j] = np.random.randint(1, (numberOfNodes + 1))

                else:
                    temp_population[i][j] = 0

    population = temp_population[:pop_size]
    # print population
    # remove loops
    for i in range(pop_size):
        for z in range(0, 5):
            for k in range(length):
                for l in range(k + 1, length):
                    if population[i][k] == population[i][l]:
                        temp = l
                        for m in range(k + 1, length):
                            if population[i][m] == 0 or temp+1 == length:
                                break

                            temp += 1
                            population[i][m] = population[i][temp]

                        for n in range(temp+1, length):
                            population[i][n] = 0
                        break

    # find fitness of initial population
    for a in range(0, pop_size):
        sample_fitness[a] = 0
        j = 0
        while population[a][j] != destination and j != length-1:
            temp = population[a][j]
            temp1 = population[a][j + 1]
            fitness[a] += weights[temp - 1][temp1 - 1]
            j += 1
            del temp
            del temp1

    # sort fitness according to fitness - ascending
    for b in range(pop_size):
        for j in range(pop_size - b - 1):
            if fitness[j] >= fitness[j+1]:
                temp = fitness[j]
                fitness[j] = fitness[j+1]
                fitness[j+1] = temp

                temp1 = population[j]
                population[j] = population[j+1]
                population[j+1] = temp1
    # print population

def allpaths():
    for i in range(allspace):
        c = 0
        while c == 0:
            c = 0
            all_paths[i][0] = source
            for j in range(1, length):
                if c == 0:
                    if links[all_paths[i][j - 1] - 1][destination - 1] == 1:
                        all_paths[i][j] = destination
                        c = 1
                    else:
                        all_paths[i][j] = np.random.randint(1, (numberOfNodes + 1))
                        while all_paths[i][j] == source or links[all_paths[i][j - 1] - 1][all_paths[i][j] - 1] == 0:
                            all_paths[i][j] = np.random.randint(1, (numberOfNodes + 1))

                else:
                    all_paths[i][j] = 0

    # remove loops
    for i in range(allspace):
        for z in range(0, 10):
            for c in range(length):
                for l in range(c + 1, length):
                    if all_paths[i][c] == all_paths[i][l]:
                        temp = l
                        for m in range(c + 1, length - temp):
                            temp += 1
                            all_paths[i][m] = all_paths[i][temp]
                            if all_paths[i][m] == 0:
                                break

                        for n in range(temp, length):
                            all_paths[i][n] = 0
                        break

    # find fitness of population
    for i in range(allspace):
        allfitness[i] = 0
        j = 0
        while all_paths[i][j] != destination and j != length - 1:
            temp = all_paths[i][j]
            temp1 = all_paths[i][j + 1]
            allfitness[i] += weights[temp - 1][temp1 - 1]
            j += 1
            del temp
            del temp1

    print 'Best Path (all) has fitness = ' + str(np.min(allfitness))


def crossover():
    global pc
    global k
    global population
    global source
    global destination
    global offspring_final_length
    global offspring
    global p
    global fitness
    tempfitness = [0 for i in range(pop_size)]
    p = 0

    totalfitness = 0
    for z in range(pop_size):
        tempfitness[z] = 2000 - fitness[z]
        totalfitness += tempfitness[z]

    for a in range(pop_size):
        for b in range(pop_size - a - 1):
            if tempfitness[b] < tempfitness[b + 1]:
                temp = tempfitness[b]
                tempfitness[b] = tempfitness[b + 1]
                tempfitness[b + 1] = temp

                temp1 = population[b]
                population[b] = population[b + 1]
                population[b + 1] = temp1

    sum_sus = [0 for f in range(pop_size + 1)]
    sum_sus[0] = 0
    sum_sus[pop_size] = 1
    for c in range(1, pop_size):
        sum_sus[c] = float(tempfitness[c] / totalfitness)
        sum_sus[c] += sum_sus[c - 1]

    sus_pop = [[0 for f in range(length)] for g in range(pop_size)]

    for d in range(pop_size):
        pointer = 1 / pop_size
        for e in range(pop_size):
            if sum_sus[e] < pointer < sum_sus[e + 1]:
                sus_pop[d][:] = population[e][:]
                break
            pointer += (1 / pop_size)

    population[:][:] = sus_pop[:][:]

    for l in range(pop_size):
        prob = np.random.uniform(0.0, 1.0)
        if prob < pc:
            k = 0
            parent1 = np.random.randint(0, pop_size)
            parent2 = np.random.randint(0, pop_size)
            while parent1 == parent2:
                parent2 = np.random.randint(0, pop_size)
            i = 0
            j = 0
            while population[parent1][i] != destination:
                while population[parent2][j] != destination:
                    if population[parent1][i] == population[parent2][j] and population[parent1][i] != source:

                        # do crossover and break with k=1

                        temp1 = population[parent1][i:]
                        temp2 = population[parent2][j:]

                        offspring[p * 2] = population[parent1][0:i] + temp2
                        offspring[p * 2 + 1] = population[parent2][0:j] + temp1
                        p += 1
                        k = 1
                        break

                    else:
                        j += 1

                if k == 1:
                    break

                i += 1
                j = 0

    for q in range(pop_size):
        offspring[p + q] = population[q]
        offspring_final_length = p + q


def mutation():
    global pm
    global offspring_final_length
    global source
    global destination, offspring

    for i in range(offspring_final_length):
        brk = 0
        temp = 1
        mut = np.random.uniform(0.0, 1.0)

        if mut < pm:
            j = 0
            var = 0
            while offspring[i][j] != destination:
                temp += 1
                j += 1
            if temp == 2:
                continue

            temp1 = np.random.randint(1, temp - 1)
            value = offspring[i][temp1]
            next1 = offspring[i][temp1 + 1]
            previous = offspring[i][temp1 - 1]

            mut1 = np.random.randint(1, numberOfNodes + 1)
            while links[mut1 - 1][next1 - 1] == 0 or links[mut1 - 1][previous - 1] == 0 or value == mut1 or mut1 == source:
                mut1 = np.random.randint(1, numberOfNodes + 1)
                brk += 1
                if brk == int(numberOfNodes / 2):
                    var += 1
                    break

            if var == 0:

                offspring[i][temp1] = mut1


def pop_fitness():
    global offspring_final_length
    global offspring_fitness

    for i in range(offspring_final_length):
        if offspring[i][0] != 0:
            offspring_fitness[i] = 0
            j = 0

            while offspring[i][j] != destination and j != length-1:
                temp = offspring[i][j]
                temp1 = offspring[i][j + 1]
                offspring_fitness[i] += weights[temp - 1][temp1 - 1]
                j += 1
                del temp
                del temp1


def selection():
    global offspring_final_length
    global best_fitness
    global generations

    for i in range(offspring_final_length):
        for j in range(offspring_final_length - i - 1):
            if offspring_fitness[j] > offspring_fitness[j + 1] != 0:  # and fitness[j] != 0:
                temp = offspring_fitness[j]
                offspring_fitness[j] = offspring_fitness[j + 1]
                offspring_fitness[j + 1] = temp

                temp1 = offspring[j]
                offspring[j] = offspring[j + 1]
                offspring[j + 1] = temp1

    # select best fit individuals
    for i in range(pop_size):
        population[i] = offspring[i]
        fitness[i] = offspring_fitness[i]

    for i in range(pop_size):
        for j in range(pop_size - i - 1):
            if fitness[j] >= fitness[j + 1]:
                temp = fitness[j]
                fitness[j] = fitness[j + 1]
                fitness[j + 1] = temp

                temp1 = population[j]
                population[j] = population[j + 1]
                population[j + 1] = temp1

    best_fitness[generations] = fitness[1]
    mean_fitness[generations] = np.mean(fitness)


def main():

    global generations, source, destination

    # for i in range(runs):
    # allpaths()

    init_population()
    generations = 0
    while generations != count:
        crossover()
        mutation()
        pop_fitness()
        selection()
        gen.append(generations)
        allpathmin[generations] = np.min(allfitness)
        generations += 1

    plt.plot(np.array(gen[:generations]), np.array(best_fitness[:generations]), label='Best Fitness')
    # plt.plot(np.array(gen[:generations]), np.array(allpathmin[:generations]), label='Best Fitness')

    plt.xlabel('Generations')
        # run.append(i)
        # minpathrun[i] = np.min(best_fitness)
        # minpathrunall[i] = np.min(allpathmin)
        # popinit()

    # plt.plot(np.array(run[:runs]), np.array(minpathrun[:runs]), label='Best Fitness')
    # plt.plot(np.array(run[:runs]), np.array(minpathrunall[:runs]), label='Best Fitness')
    #
    # plt.xlabel('Runs')

    plt.ylabel('Fitness ( Weights )')
    plt.ylim(0, np.max(best_fitness)+20)


    # for i in range(count):
    #     print 'Gen ' + str(i) + '  ' + str(best_fitness[i])
    # # plt.plot(np.array(gen[:generations]), np.array(mean_fitness[:generations]), label='Mean Fitness')

    # print 'NON ERROR = ' + str(non_error)
    # print 'ALL = ' + str(total_run)

    # plt.show()


if __name__ == "__main__":
    start_time = time.time()
    main()
    print '--- seconds ---' + str(time.time() - start_time)
